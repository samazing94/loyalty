@extends('layouts.dashboard')
@section('section')

<div class="container">
	<div class = "container">
	@if (Session::has('message'))
   		<div class="alert alert-info">{{ Session::get('message') }}</div>
	@endif
	</div>
		<div class="clearfix"></div>
		<div class="row">
			<div class="col-md-12 col-sm-12 col-xs-12">
				<div class="x_panel">
					<div class="x_title">
						<div class="clearfix"></div>
					</div>
					<div class="x_content">
						<br />
						<form method="post" onsubmit = "tosubmit()" action="{{ url('offerlist/calculate') }}" data-parsley-validate class="form-horizontal form-label-left">
							<div class ="form-group">
								<label  class="control-label col-md-3 col-sm-3 col-xs-12" for="sel1">Select restaurant list:</label>
								<div class="col-md-6 col-sm-6 col-xs-12">
									<select class="form-control" id="name" name="name">
										@foreach($shops as $shop)
									    <option value= "{{$shop->shop_name}}" >{{$shop->shop_name}}</option>
									    @endforeach
									</select>
									<script type="text/javascript">
						   					function setTextField(ddl) {
						        				document.getElementById('name').value = ddl.options[ddl.selectedIndex].text;
						    			}
									</script>
								</div>
							</div>

							<div class ="form-group">
								<label  class="control-label col-md-3 col-sm-3 col-xs-12" for="sel1">Select list:</label>
								<div class="col-md-6 col-sm-6 col-xs-12">
									<select class="form-control" id="name1" name="name1">
										@foreach($points as $point)
									    <option value= "{{$point->name}}" >{{$point->name}}</option>
									    @endforeach
									</select>
									<script type="text/javascript">
						   					function setTextField(ddl) {
						        				document.getElementById('name1').value = ddl.options[ddl.selectedIndex].text;
						    			}
									</script>
								</div>
							</div>

							<div class="form-group">
								
								<label class="control-label col-md-3 col-sm-3 col-xs-12" for="mobile_number">Phone No. <span class="required"><span style="color:red;">*</span></span>
								</label>
								<div class="col-md-6 col-sm-6 col-xs-12">
									<input type="text" value="{{ Request::old('customers') ?: '' }}" id="mobile_number" name="mobile_number" class="form-control col-md-7 col-xs-12">
									@if ($errors->has('customers'))
									<span class="help-block">{{ $errors->first('customers') }}</span>
									@endif
								</div>
							</div>

							<div class="form-group{{ $errors->has('amount') ? ' has-error' : '' }}">
								<label class="control-label col-md-3 col-sm-3 col-xs-12" for="amount">Amount <span class="required"><span style="color:red;">*</span></span>
								</label>
								<div class="col-md-6 col-sm-6 col-xs-12">
									<input type="number" value="" id="amount" name="amount" class="form-control col-md-7 col-xs-12">
									@if ($errors->has('amount'))
									<span class="help-block">{{ $errors->first('amount') }}</span>
									@endif
								</div>
							</div>

							<div class="form-group">
								<label class="control-label col-md-6 col-sm-6 col-xs-12" for="details">Details will be displayed here</label><div id="details"></div>
							</div>
							<div class="ln_solid"></div>
							<div class="col-md-6 col-sm-6 col-xs-12 col-md-offset-3">
								<input type="hidden" name="_token" value="{{ Session::token() }}">
								<button type="button" class="btn btn-success" onchange="showDetails(this.#details)">Submit</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
@endsection
@section('scripts')
<script>
	function showDetails(str) {
    if (str == "") {
        document.getElementById("txtHint").innerHTML = "";
        return;
    } else { 
        if (window.XMLHttpRequest) {
            // code for IE7+, Firefox, Chrome, Opera, Safari
            xmlhttp = new XMLHttpRequest();
        } else {
            // code for IE6, IE5
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
        xmlhttp.onreadystatechange = function() {
            if (this.readyState == 4 && this.status == 200) {
                document.getElementById("txtHint").innerHTML = this.responseText;
            }
        };
        xmlhttp.open("GET","getuser.php?q="+str,true);
        xmlhttp.send();
    }
}
</script>




----------

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Input;
//use App\Http\Controllers\Session;
use Redirect;
use Carbon\Carbon;
use App\Point;
use App\Customer;
use App\Reedem;
use App\MerchantShop;
use App\ShopInfo;
use Auth;
use DB;
use Session;


class PointsController extends Controller
{
	
	public function view()
	{
		$orders = Point::all();
		return view('offers.list', compact('orders'));
	}

	public function index()
	{
		$userSession = Auth::user()->id;
		$customers = Customer::all();
		$shops = DB::table('shop_info')->select('shop_info.id', 'shop_info.shop_name')
        ->leftJoin('shop_user', 'shop_user.shop_id', '=', 'shop_info.id')
        ->leftJoin('users', 'users.id', '=', 'shop_user.user_id')->where('shop_user.user_id', $userSession)->get();
        $points = DB::table('point_rule')->select('*')
        ->where('point_rule.merchant_id', $userSession)->get();

		return view('offers.offerlist', compact('customers', 'points', 'shops'));
	}
	//create offers
	public function create()
	{
		return view('offers.register');
	}
	//create point redeems
	public function createPoints()
	{
		return view('offers.create_points');
	}

	public function storePoints(Request $request)
	{
		$userSession = Auth::user()->id;
		$name = $request->input('name');
		$description = $request->input('description');
		$min_point = $request->input('min_point');
		$amount = $request->input('amount');
		$offer_start = $request->input('offer_start');
		$offer_end = $request->input('offer_end');
		$status = 1; 
		$rst = array('name' => $name, 'description' => $description, 'min_point' => $min_point, 'amount' => $amount ,'offer_start' => 
		$offer_start, 'offer_end' => $offer_end, 'merchant_id' => $userSession);	
		DB::table('point_rule_redeem')->insert($rst);
		Session::flash('message', "Successfully registered new offer");
		return Redirect::back();
  	}

	public function store(Request $request)
	{
		$userSession = Auth::user()->id;
		$name = $request->input('name');
		$description = $request->input('description');
		$min_amount = $request->input('min_amount');
		$point = $request->input('point');
		$offer_start = $request->input('offer_start');
		$offer_end = $request->input('offer_end');
		$status = 1; 
		$rst = array('name' => $name, 'description' => $description, 'min_amount' => $min_amount,'point' => $point ,'offer_start' => 
		$offer_start, 'offer_end' => $offer_end, 'merchant_id' => $userSession);	
		DB::table('point_rule')->insert($rst);
		Session::flash('message', "Successfully registered new offer");
		return Redirect::back();
  	}

  	public function redeem()
  	{
  		$userSession = Auth::user()->id;
		$customers = Customer::all();
		$shops = DB::table('shop_info')->select('shop_info.id', 'shop_info.shop_name')
        ->leftJoin('shop_user', 'shop_user.shop_id', '=', 'shop_info.id')
        ->leftJoin('users', 'users.id', '=', 'shop_user.user_id')->where('shop_user.user_id', $userSession)->get();
        $points = DB::table('point_rule_redeem')->select('*')
        ->where('point_rule_redeem.merchant_id', $userSession)->get();

		return view('offers.redeemprocess', compact('customers', 'points', 'shops'));
  	}
	public function redeem_calculate(Request $request)
  	{
  		//point rule and customer
		$redeem_points = $request->input('redeem_points');
		$name = $request->input('name1');
		$mobile_number = $request->input('mobile_number');
		//customerinfo
		$customers = DB::table('customerinfo')->where('mobile_number', $mobile_number)->first();
		$userSession = Auth::user()->id;
		//point_rule
		$points = DB::table('point_rule_redeem')->where('name', $name)->whereRaw('SYSDATE() BETWEEN offer_start AND offer_end')->first();	
		if ($points->min_point != NULL)
		{
			$dec = ceil($amount/$points->min_amount);

			$pointamt = $points->point;

			$merchant = DB::table('merchant_shop')->select('merchant_shop.merchant_id', 'merchant_shop.shop_id')
        		->leftJoin('shop_user', 'shop_user.shop_id', '=', 'merchant_shop.shop_id')
        		->leftJoin('users', 'users.id', '=', 'shop_user.user_id')->where('shop_user.user_id', $userSession)->first();		
			if(!$customers)
			{
				Session::flash('message', "Customer not registered");
				return Redirect::back();
			}
			else {	
				$cs_id = $customers->id;
				$pointamt = $dec + $points->point;

				DB::table('shop_redeemed')->insert(['point_rule_id' => $points->id, 'shop_id' => $merchant->shop_id, 'customerinfo_id' => 
					$customers->id, 'total_amount' => $amount, 'point' => $pointamt, 'updated_by' => $userSession]);
			}
			
			$redeemcst = DB::table('shop_redeemed')->where('customerinfo_id', $customers->id)->orderBy('id', 'desc')->first();

			return view('offerlist/redeem_calculate', compact('customers', 'redeemcst'));
		}
		else
		{
			Session::flash('message', "Something went wrong");
			return Redirect::back();
		}	
  	}
	public function calculate(Request $request)
	{
		//point rule and customer
		$amount = $request->input('amount');
		$name = $request->input('name1');
		$mobile_number = $request->input('mobile_number');
		//customerinfo
		$customers = DB::table('customerinfo')->where('mobile_number', $mobile_number)->first();
		$userSession = Auth::user()->id;
		//point_rule
		$points = DB::table('point_rule')->where('name', $name)->whereRaw('SYSDATE() BETWEEN offer_start AND offer_end')->first();		

		if ($points->min_amount != NULL)
		{
			$dec = ceil($amount/$points->min_amount);

			$pointamt = $points->point;
			//$cst_point = 100;
			//merchant
			//$merchant = DB::table('merchant_shop')->where('merchant_id', $points->merchant_id)->first();
			$merchant = DB::table('merchant_shop')->select('merchant_shop.merchant_id', 'merchant_shop.shop_id')
        		->leftJoin('shop_user', 'shop_user.shop_id', '=', 'merchant_shop.shop_id')
        		->leftJoin('users', 'users.id', '=', 'shop_user.user_id')->where('shop_user.user_id', $userSession)->first();
			if(!$merchant)
			{
				Session::flash('message', "Merchant doesn't exist");
				return Redirect::back();
			}
			if(!$customers)
			{
				Session::flash('message', "Customer not registered");
				return Redirect::back();
			}
			else {	
				$cs_id = $customers->id;
				$pointamt = $dec + $points->point;

				DB::table('shop_redeemed')->insert(['point_rule_id' => $points->id, 'shop_id' => $merchant->shop_id, 'customerinfo_id' => 
					$customers->id, 'total_amount' => $amount, 'point' => $pointamt, 'updated_by' => $userSession]);;
			}
			
			$redeemcst = DB::table('shop_redeemed')->where('customerinfo_id', $customers->id)->orderBy('id', 'desc')->first();

			return view('calculate', compact('customers', 'redeemcst'));
		}
		else
		{
			Session::flash('message', "Something went wrong");
			return Redirect::back();
		}
	}
	public function update(Request $request)
	{
        Point::where('id', $request->id)->update(['name' => $request->name, 'min_amount' => $request->min_amount, 'point' => $request->point, 'merchant_id' => $request->merchant_id, 'offer_start' => $request->offer_start, 'offer_end' => $request->offer_end]);

        return response()->json(['name' => $request->name, 'min_amount' => $request->min_amount, 'point' => $request->point, 'merchant_id' => $request->merchant_id,  'offer_start' => $request->offer_start, 'offer_end' => $request->offer_end]);
	}

	public function delete(Request $request)
	{
		Point::where('id', $request->id)->delete();

        return response()->json(['id' => $request->id]);
	}





 $('#response').html("<b>Loading response...</b>");
         
        /*
         * 'post_receiver.php' - where you will pass the form data
         * $(this).serialize() - to easily read form data
         * function(data){... - data contains the response from post_receiver.php
         */
        $.post('{{ url('post_receiver') }}', { Amount: amount }, function(data){
             console.log(data);
            // show the response
            $('#response').html(data);
            //alert(data);

             
        }).fail(function() {
         
            // just in case posting your form failed
            alert( "Posting failed." );
             
        });
 
        // to prevent refreshing the whole page page
        return false;	}
